/// <reference types="jest" />
/// <reference types="node" />
import Koa from 'koa';
import { URL } from 'url';
interface Config {
    buildApp?: () => Koa;
    port?: number;
    host?: string;
}
declare type Path = string | RegExp;
export declare class MockServer {
    private config;
    private router;
    private server?;
    private requestListener;
    constructor(config?: Config);
    start(): Promise<MockServer>;
    get(path: Path): jest.Mock<any, [context: Koa.ParameterizedContext<Koa.DefaultState, Koa.DefaultContext, any>, next: Koa.Next]>;
    head(path: Path): jest.Mock<any, [context: Koa.ParameterizedContext<Koa.DefaultState, Koa.DefaultContext, any>, next: Koa.Next]>;
    post(path: Path): jest.Mock<any, [context: Koa.ParameterizedContext<Koa.DefaultState, Koa.DefaultContext, any>, next: Koa.Next]>;
    put(path: Path): jest.Mock<any, [context: Koa.ParameterizedContext<Koa.DefaultState, Koa.DefaultContext, any>, next: Koa.Next]>;
    delete(path: Path): jest.Mock<any, [context: Koa.ParameterizedContext<Koa.DefaultState, Koa.DefaultContext, any>, next: Koa.Next]>;
    options(path: Path): jest.Mock<any, [context: Koa.ParameterizedContext<Koa.DefaultState, Koa.DefaultContext, any>, next: Koa.Next]>;
    trace(path: Path): jest.Mock<any, [context: Koa.ParameterizedContext<Koa.DefaultState, Koa.DefaultContext, any>, next: Koa.Next]>;
    patch(path: Path): jest.Mock<any, [context: Koa.ParameterizedContext<Koa.DefaultState, Koa.DefaultContext, any>, next: Koa.Next]>;
    all(path: Path): jest.Mock<any, [context: Koa.ParameterizedContext<Koa.DefaultState, Koa.DefaultContext, any>, next: Koa.Next]>;
    getURL(): URL;
    stop(): Promise<MockServer>;
    reset(): MockServer;
    private init;
    private mockPath;
    private getDefaultMock;
}
export {};
//# sourceMappingURL=server.d.ts.map