"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockServer = void 0;
const tslib_1 = require("tslib");
const http_1 = require("http");
const koa_1 = tslib_1.__importDefault(require("koa"));
const koa_bodyparser_1 = tslib_1.__importDefault(require("koa-bodyparser"));
const koa_router_1 = tslib_1.__importDefault(require("koa-router"));
const url_1 = require("url");
function buildDefaultApp() {
    const app = new koa_1.default();
    app.use((0, koa_bodyparser_1.default)());
    return app;
}
class MockServer {
    constructor(config = {}) {
        this.config = config;
        this.init();
    }
    async start() {
        const server = (0, http_1.createServer)((req, res) => this.requestListener(req, res));
        await new Promise((resolve, reject) => server
            .on('error', reject)
            .on('listening', resolve)
            .listen({ port: this.config.port || 0, host: this.config.host }));
        this.server = server;
        return this;
    }
    get(path) {
        return this.mockPath('get', path);
    }
    head(path) {
        return this.mockPath('head', path);
    }
    post(path) {
        return this.mockPath('post', path);
    }
    put(path) {
        return this.mockPath('put', path);
    }
    delete(path) {
        return this.mockPath('delete', path);
    }
    options(path) {
        return this.mockPath('options', path);
    }
    trace(path) {
        return this.mockPath('trace', path);
    }
    patch(path) {
        return this.mockPath('patch', path);
    }
    all(path) {
        const mock = this.getDefaultMock();
        this.router.all(path, mock);
        return mock;
    }
    getURL() {
        const server = this.server;
        if (!server) {
            throw new Error('Server is not started');
        }
        const { port } = server.address();
        const host = 'http://localhost';
        return new url_1.URL(`${host}:${port}`);
    }
    async stop() {
        const server = this.server;
        if (!server) {
            return this;
        }
        await new Promise((resolve, reject) => {
            server.close((error) => (error ? reject(error) : resolve()));
        });
        return this;
    }
    reset() {
        this.init();
        return this;
    }
    init() {
        var _a, _b;
        this.router = new koa_router_1.default();
        const app = ((_b = (_a = this.config).buildApp) === null || _b === void 0 ? void 0 : _b.call(_a)) || buildDefaultApp();
        app.use(this.router.routes());
        this.requestListener = app.callback();
    }
    mockPath(method, path) {
        const mock = this.getDefaultMock();
        this.router.register(path, [method], mock);
        return mock;
    }
    getDefaultMock() {
        const middleware = (ctx, next) => next();
        return jest.fn(middleware);
    }
}
exports.MockServer = MockServer;
